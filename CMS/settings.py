"""
Django settings for CMS project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path

import django.utils.log
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0y!5ba(*wjnx&#(hp8(wjn2qnsjx#!o1ifmk0#=u39!65hki2y'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django.forms',
    'admin_reorder',
    'CMSapp.apps.CmsappConfig',
]

CRISPY_TEMPLATE_PACK = 'bootstrap5'

# 解决django4.0报Cross-Origin-Opener-Policy错误
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'None'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'CMSapp.common.context_processors.LoginRequiredMiddleware',  # 自定义编写中间件检查用户是否登录，位于SessionMiddleware和CommonMiddleware之间，AuthenticationMiddleware之后
    'django.middleware.locale.LocaleMiddleware',  # 支持动态国际化切换
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'admin_reorder.middleware.ModelAdminReorder',  # 后台admin模块排序
]

LOCALE_PATHS = (os.path.join(BASE_DIR, "locale"),)

ROOT_URLCONF = 'CMS.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.i18n',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'CMSapp.common.context_processors.get_username',
            ],
        },
    },
]

WSGI_APPLICATION = 'CMS.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

# LANGUAGE_CODE = 'zh-hans'
LANGUAGE_CODE = 'en'

LANGUAGES = [
    ('en', _('English')),
    ('zh-hant', _('Traditional Chinese')),
    ('zh-hans', _('Simplified Chinese')),
]

DEFAULT_LANG = 'en'

TIME_ZONE = 'Asia/Shanghai'
# TIME_ZONE = 'UTC'

# 开启国际化
USE_I18N = True

# 开启本地化
USE_L10N = True

USE_TZ = False
# USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

LOGIN_URL = '/login/'

# MEDIA_URL = 'media/'
#
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DEFAULT_CHARSET = 'utf-8'

ADMIN_REORDER = (
    {
        'app': 'auth',
        'label': _('Authentication and Authorization'),
        'models': (
            'auth.User',
            'auth.Group',
        ),
    },
    {
        'app': 'CMSapp',
        'label': _('Type Setting Modeling-'),
        'models': (
            'CMSapp.ConsumableType',
            'CMSapp.TypeGroup',
            'CMSapp.TypeDefinition',
        ),
    },
    {
        'app': 'CMSapp',
        'label': _('Consumable Setting Modeling-'),
        'models': (
            'CMSapp.Consumable',
        ),
    },
    {
        'app': 'CMSapp',
        'label': _('EquipmentType Setting Modeling-'),
        'models': (
            'CMSapp.EquipmentType',
        ),
    },
    {
        'app': 'CMSapp',
        'label': _('Position Setting Modeling-'),
        'models': (
            'CMSapp.Plot',
            'CMSapp.Build',
            'CMSapp.Floor',
            'CMSapp.Room',
        ),
    },
    {
        'app': 'CMSapp',
        'label': _('EquipmentInfo'),
        'models': (
            'CMSapp.EquipmentInfo',
        ),
    },
    # System Log
    {
        'app': 'admin',
        'label': _('Admin Log Modeling-'),
        'models': (
            'admin.LogEntry',
        )
    },
)

# log settings

# 管理员邮箱
# ADMINS = (
#     ('Joker', 'C3702151@GIS-Touch.com'),
# )

# 非空链接，却发生404错误，发送通知MANAGERS
# SEND_BROKEN_LINK_EMAILS = True
# MANAGERS = ADMINS

# Email设置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = ''  # example: QQ邮箱SMTP服务器(邮箱需要开通SMTP服务) smtp.163.com
EMAIL_PORT = 587  # example: QQ邮箱SMTP服务端口 25
EMAIL_HOST_USER = ''  # 我的邮箱帐号
EMAIL_HOST_PASSWORD = ''  # 授权码
EMAIL_SUBJECT_PREFIX = 'CMS'  # 为邮件标题的前缀,默认是'[django]'
EMAIL_USE_TLS = True  # 开启安全链接
DEFAULT_FROM_EMAIL = SERVER_EMAIL = EMAIL_HOST_USER  # 设置发件人

# logging日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '[%(asctime)s][%(funcName)s][%(filename)s][%(lineno)s] %(message)s',
        },
        'simple': {
            'format': '[%(asctime)s] %(message)s',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'debug': {  # 记录到日志文件(需要创建对应的目录，否则会出错)
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "log", 'debug.log'),  # 日志输出文件
            'maxBytes': 1024 * 1024 * 5,  # 文件大小
            'backupCount': 3,  # 备份份数
            'formatter': 'standard',  # 使用哪种formatters日志格式
        },
        # 'mail_admins': {  # 发送邮件通知管理员
        #     'level': 'ERROR',
        #     'class': 'django.utils.log.AdminEmailHandler',
        #     'filters': ['require_debug_false'],  # 仅当 DEBUG = False 时才发送邮件
        #     'include_html': True,
        # },
        'info': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，根据文件大小自动切
            'filename': os.path.join(BASE_DIR, "log", "CMS_info.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 3,  # 备份数为3  xx.log --> xx.log.1 --> xx.log.2 --> xx.log.3
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'warn': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，根据文件大小自动切
            'filename': os.path.join(BASE_DIR, "log", "CMS_warn.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 3,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_DIR, "log", "CMS_error.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 5,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
    },
    'loggers': {
        'CMS': {  # 默认的logger应用如下配置
            'handlers': ['console', 'info', 'warn', 'error'],  # 上线之后可以把'console'移除
            'level': 'DEBUG',
            'propagate': True,
        },
        # 'django.request': {
        #     'handlers': ['debug', 'mail_admins'],
        #     'level': 'ERROR',
        #     'propagate': True,
        # },
    },
}

LANGUAGE_SESSION_KEY = '_language'
